; Tic-Tac-Toe for JMON on TEC-1B with full board display
; Constants
DISPLAY_DATA    EQU 0x02  ; Port for display data (connected to 74LS374)
DISPLAY_SELECT  EQU 0x01  ; Port for display select (connected to 74LS138)
INPUT_PORT      EQU 0x00  ; Port for keyboard input (74C923)

; RAM Variables
    ORG 0x8000
board:          DS 9    ; Tic-tac-toe board (0 = empty, 1 = player, 2 = CPU)
current_player: DS 1    ; 1 = player, 2 = CPU
cursor:         DS 1    ; Current cursor position (0-8)
display_mode:   DS 1    ; 0 = top two rows, 1 = bottom row

    ORG 0x0000
    JP main

main:
    CALL init_game
game_loop:
    CALL display_board
    LD A, (current_player)
    CP 1
    JP Z, player_turn
    CALL cpu_turn
    JP check_game_over

player_turn:
    RST 0x10
    AND 0x0F  ; Mask to get 0-15
    CP 9
    JP NC, player_turn  ; If >=9, invalid input, try again
    LD (cursor), A
    LD HL, board
    LD C, A
    LD B, 0
    ADD HL, BC
    LD A, (HL)
    CP 0
    JP NZ, player_turn  ; Invalid move, try again
    LD (HL), 1
    JP check_game_over

cpu_turn:
    LD HL, board
    LD B, 9
cpu_loop:
    LD A, (HL)
    CP 0
    JP Z, cpu_move_found
    INC HL
    DJNZ cpu_loop
    RET  ; No moves available (shouldn't happen)

cpu_move_found:
    LD (HL), 2
    RET

check_game_over:
    LD A, (current_player)
    CP 1
    JP Z, set_cpu_turn
    LD A, 1
    LD (current_player), A
    JP game_loop

set_cpu_turn:
    LD A, 2
    LD (current_player), A
    JP game_loop

init_game:
    LD HL, board
    LD B, 9
    XOR A
clear_loop:
    LD (HL), A
    INC HL
    DJNZ clear_loop
    LD A, 1
    LD (current_player), A
    XOR A
    LD (cursor), A
    LD (display_mode), A
    RET

display_board:
    LD A, (display_mode)
    XOR 1
    LD (display_mode), A  ; Toggle display mode
    OR A
    JP Z, display_top_rows
    ; Display bottom row
    LD HL, board + 6
    LD B, 3
    CALL display_row
    ; Display current player in 4th position
    LD A, 3
    OUT (DISPLAY_SELECT), A
    LD A, (current_player)
    CALL convert_to_7seg
    OUT (DISPLAY_DATA), A
    ; Display "P" in 5th position to indicate "Player"
    LD A, 4
    OUT (DISPLAY_SELECT), A
    LD A, 0x73  ; "P" on 7-segment display
    OUT (DISPLAY_DATA), A
    ; Leave 6th position blank
    LD A, 5
    OUT (DISPLAY_SELECT), A
    XOR A
    OUT (DISPLAY_DATA), A
    RET

display_top_rows:
    LD HL, board
    LD B, 3
    CALL display_row
    LD HL, board + 3
    LD B, 3
    CALL display_row
    RET

display_row:
    LD C, 0
display_cell:
    LD A, C
    OUT (DISPLAY_SELECT), A
    LD A, (HL)
    CALL convert_to_7seg
    OUT (DISPLAY_DATA), A
    INC HL
    INC C
    DJNZ display_cell
    RET

convert_to_7seg:
    ; Convert board state to 7-segment LED pattern
    ; 0 (empty) = 0x00 (all segments off)
    ; 1 (player) = 0x06 (segments b and c on, displays as "1")
    ; 2 (CPU) = 0x5B (segments a, b, d, e, g on, displays as "2")
    CP 0
    JR Z, empty_cell
    CP 1
    JR Z, player_cell
    ; Must be 2 (CPU)
    LD A, 0x5B
    RET
empty_cell:
    XOR A  ; LD A, 0
    RET
player_cell:
    LD A, 0x06
    RET
