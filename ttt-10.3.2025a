// TIC-TAC-TOE game for MINT interpreter
// Reset game state
:I
  // Allocate memory for the board (9 cells)
  9 /A b!                   // Allocate memory for board and store address in b
  
  // Initialize all cells to 0 (empty)
  0 i!                      // Counter for initialization
  9(
    0 b i \?!               // Set cell to empty (0)
    i 1+ i!                 // Increment counter
  )
  
  0 p!                      // Initialize current player (0=X, 1=O)
  0 m!                      // Initialize move count
  /F g!                     // Game over flag (false)
;

// Print the board
:P
  `\n Current Board:\n`
  `  0 1 2\n`               // Column headers
  
  0 i!                      // Row counter
  3(                        // Loop through 3 rows
    i . ` `                 // Print row number
    
    0 j!                    // Column counter
    3(                      // Loop through 3 columns
      // Calculate index: row*3 + column
      i 3* j+ k!
      
      // Get cell value
      b k \? v!
      
      // Print cell content based on value
      v 0=(` .`)            // Empty cell
      v 1=(`O`)             // O player
      v 2=(`X`)             // X player
      
      ` `                   // Space after each cell
      j 1+ j!               // Next column
    )
    `\n`                    // New line after each row
    i 1+ i!                 // Next row
  )
  `\n`
;

// Check if current player has won
:W
  /F w!                     // Initialize win flag to false
  
  // Check rows
  0 i!                      // Row counter
  3(
    // Get all three cells in this row
    i 3* k!                 // Base index for row
    b k \? a!               // First cell
    b k 1+ \? d!            // Second cell
    b k 2+ \? e!            // Third cell
    
    // Check if all three match and aren't empty
    a 0 > a d = & a e = & (
      /T w!                 // Set win flag to true
    )
    i 1+ i!                 // Next row
  )
  
  // Check columns
  0 j!                      // Column counter
  3(
    // Get all three cells in this column
    b j \? a!               // Top cell
    b j 3+ \? d!            // Middle cell
    b j 6+ \? e!            // Bottom cell
    
    // Check if all three match and aren't empty
    a 0 > a d = & a e = & (
      /T w!                 // Set win flag to true
    )
    j 1+ j!                 // Next column
  )
  
  // Check diagonal (top-left to bottom-right)
  b 0 \? a!                 // Top-left cell
  b 4 \? d!                 // Center cell
  b 8 \? e!                 // Bottom-right cell
  
  // Check if all three match and aren't empty
  a 0 > a d = & a e = & (
    /T w!                   // Set win flag to true
  )
  
  // Check diagonal (top-right to bottom-left)
  b 2 \? a!                 // Top-right cell
  b 4 \? d!                 // Center cell
  b 6 \? e!                 // Bottom-left cell
  
  // Check if all three match and aren't empty
  a 0 > a d = & a e = & (
    /T w!                   // Set win flag to true
  )
  
  w                         // Return win flag
;

// Convert player number (0/1) to mark (2/1)
:M
  p 0= (2) /E (1)           // Player 0 uses X (2), Player 1 uses O (1)
;

// Check if a move is valid (cell is empty)
:V
  k!                        // Get cell index
  
  // Check if index is in range and cell is empty
  k 0 >= k 9 < & b k \? 0 = &
;

// Make a move at the given position
:D
  k!                        // Get cell index
  k V (                     // If move is valid
    // Place current player's mark
    M b k \?!               // Convert player to mark and place it
    m 1+ m!                 // Increment move count
    /T                      // Return true (valid move)
  ) /E (
    `Invalid move!\n`
    /F                      // Return false (invalid move)
  )
;

// Find winning move for CPU (player 1)
:F
  /F f!                     // Initialize found flag
  0 i!                      // Cell counter
  
  // Try each empty cell
  9(
    i V (                   // If cell is empty
      // Try placing O here
      1 b i \?!             // Place O (CPU)
      
      // Check if this move wins
      W (
        i k!                // Save winning position
        /T f!               // Set found flag
      )
      
      // Restore empty cell
      0 b i \?!
    )
    i 1+ i!                 // Next cell
  )
  
  f                         // Return found flag
;

// Find blocking move to prevent player from winning
:B
  /F f!                     // Initialize found flag
  0 i!                      // Cell counter
  
  // Try each empty cell
  9(
    i V (                   // If cell is empty
      // Try placing X here (simulate player's move)
      2 b i \?!             // Place X (human)
      
      // Check if this move would win for player
      W (
        i k!                // Save blocking position
        /T f!               // Set found flag
      )
      
      // Restore empty cell
      0 b i \?!
    )
    i 1+ i!                 // Next cell
  )
  
  f                         // Return found flag
;

// Random move for CPU
:R
  // Find a random empty cell
  /F f!                     // Initialize found flag
  m 8 = (                   // If this is the last move
    // Find the only empty cell
    0 i!                    // Cell counter
    9(
      i V (                 // If cell is empty
        i k!                // Save position
        /T f!               // Set found flag
      )
      i 1+ i!               // Next cell
    )
  ) /E (
    // Try random positions until we find an empty one
    10(                     // Try a few times
      9 / k!                // Random number 0-8
      k V (                 // If cell is empty
        /T f!               // Set found flag
      )
    )
    
    // If random doesn't work, find first empty cell
    f /F = (
      0 i!                  // Cell counter
      9(
        i V (               // If cell is empty
          i k!              // Save position
          /T f!             // Set found flag
        )
        i 1+ i!             // Next cell
      )
    )
  )
  
  f                         // Return found flag
;

// CPU move strategy
:C
  // Try to win
  F (
    `CPU finds winning move at ` k . `\n`
    k D                     // Make the winning move
  ) /E (
    // Try to block player
    B (
      `CPU blocks at ` k . `\n`
      k D                   // Make blocking move
    ) /E (
      // Try center if available
      4 V (
        `CPU takes center\n`
        4 k! k D            // Take center
      ) /E (
        // Random/strategic move
        R (
          `CPU moves at ` k . `\n`
          k D               // Make random move
        )
      )
    )
  )
;

// Human player's turn
:H
  `Player X turn\n`
  `Enter row (0-2): `
  /K 48- r!                  // Get row (subtract ASCII '0')
  `Enter column (0-2): `
  /K 48- c!                  // Get column (subtract ASCII '0')
  
  // Convert to board index
  r 3* c+ k!
  
  // Make the move
  k D (                     // If valid move
    /T                      // Return true (move made)
  ) /E (
    /F                      // Return false (invalid move)
  )
;

// Main game loop
:G
  I                         // Initialize game
  P                         // Print initial board
  
  /U (                      // Start game loop
    // Human's turn
    p 0= (
      H /F = (              // If human move was invalid
        `Try again\n`
      ) /E (                // Else check for win/draw
        W (                // If player won
          P                // Show board
          `Player X wins!\n`
          /T g!             // Set game over flag
        ) /E (              // Else check for draw
          m 9= (
            P              // Show board
            `Game ends in a draw!\n`
            /T g!           // Set game over flag
          ) /E (            // Else switch player
            1 p!            // Switch to CPU
          )
        )
      )
    ) /E (                  // CPU's turn
      C                     // Make CPU move
      W (                   // If CPU won
        P                   // Show board
        `CPU (O) wins!\n`
        /T g!               // Set game over flag
      ) /E (                // Else check for draw
        m 9= (
          P                // Show board
          `Game ends in a draw!\n`
          /T g!             // Set game over flag
        ) /E (              // Else switch player
          0 p!              // Switch to human
        )
      )
      P                     // Show board after CPU move
    )
    
    // Check if game is over
    g /W                    // Continue while game not over
  )
  
  `Game over\n`
;

// Start the game
G
